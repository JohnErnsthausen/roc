#include <cmath>
#include <iostream>
#include <vector>
#include "roc.hpp"

int main()
{
  // Variables to interact with roc
  double time{0};
  double scale{0};
  double rc{0};
  double order{0};
  double a{0};

  // Output format
  std::cout.precision(16);
  std::cout << std::scientific;

  // t =-0.3;
  // x[0] = 1.0/(1.0+25.0*t*t);

  a =1.0/5.0;
  time  =-0.3;
  scale = 1.0;
  std::vector<double> coeffs{3.0769230769230771e-01,  1.4201183431952664e+00,
                        4.1875284478834782e+00,  8.4030671194986173e+00,
                        6.5716294139668623e+00,  -3.4308380547065390e+01,
                        -2.0889736724773917e+02, -7.0023107539675470e+02,
                        -1.6249329076177976e+03, -2.1132974551840298e+03,
                        2.7458033423644597e+03,  2.8929072773866963e+04,
                        1.1239723324581322e+05,  2.9622513210477668e+05,
                        5.0259881551579072e+05,  4.1031978497674834e+04,
                        -3.6767663724398911e+06, -1.7285321553550843e+07,
                        -5.1495588920697041e+07, -1.0470793691436444e+08,
                        -8.7147486368627921e+07, 4.0322650071682835e+08,
                        2.5314106676824994e+09,  8.5816915376359320e+09,
                        2.0135417345377384e+10,  2.6919683612234612e+10,
                        -3.0643132138743221e+10, -3.4850432996523499e+11,
                        -1.3727651218492134e+12, -3.6550364857253306e+12};

  // Cos(Theta) = 5.063697
  std::cout << "T     = " << time << "\n";
  std::cout << "Scale = " << scale << "\n";
  std::cout << "Size  = " << coeffs.size() << "\n";
  std::cout << "Actual RC = " << sqrt(a * a + time * time) << "\n";
  std::cout << "Actual Order = " << 1 << "\n";

  // Call ROC here
  roc(coeffs, scale, rc, order);

  // t = 0.9;
  // x[0] = 1.0/((1.0-t)*(1.0-t));

  a = 1.0;
  time = 0.9;
  scale = 1.0;
  coeffs.assign({
      1.000000000000001e+02, 2.000000000000002e+03, 3.000000000000004e+04,
      4.000000000000006e+05, 5.000000000000010e+06, 6.000000000000015e+07,
      7.000000000000021e+08, 8.000000000000028e+09, 9.000000000000035e+10,
      1.000000000000004e+12, 1.100000000000005e+13, 1.200000000000006e+14,
      1.300000000000008e+15, 1.400000000000009e+16, 1.500000000000010e+17,
      1.600000000000010e+18, 1.700000000000012e+19, 1.800000000000013e+20,
      1.900000000000014e+21, 2.000000000000016e+22, 2.100000000000018e+23,
      2.200000000000020e+24, 2.300000000000022e+25, 2.400000000000025e+26,
      2.500000000000028e+27, 2.600000000000031e+28, 2.700000000000035e+29,
      2.800000000000039e+30, 2.900000000000042e+31, 3.000000000000046e+32});

  std::cout << "T     = " << time << "\n";
  std::cout << "Scale = " << scale << "\n";
  std::cout << "Size  = " << coeffs.size() << "\n";
  std::cout << "Actual RC = " << a - time << "\n";
  std::cout << "Actual Order = " << 2 << "\n";

  // Call ROC here
  roc(coeffs, scale, rc, order);

  // sin(1/x)
  time = 0.0;
  scale = 1.0;
  coeffs.assign({
    9.0929742682568171e-01,
    1.6645873461885696e+00,
    -1.0603554106982592e+01,
    3.1316967453339910e+01,
    -6.4276681652949620e+01,
    7.8837687899733936e+01,
    6.7177632305861877e+01,
    -8.4019999509347451e+02,
    3.5340688314650765e+03,
    -1.1340478059186151e+04,
    3.1354337429284711e+04,
    -7.7629763926507076e+04,
    1.7374335844716826e+05,
    -3.4714129754770326e+05,
    5.8850767462860153e+05,
    -6.9656333122772712e+05,
    -2.0772468152910232e+05,
    5.0464793167449487e+06,
    -2.2351863238477785e+07,
    7.5067931147442907e+07,
    -2.2122044556259948e+08,
    6.0021914221414745e+08,
    -1.5315907300837662e+09,
    3.7138649003396449e+09,
    -8.5965617529005375e+09,
    1.9001022135415882e+10,
    -3.9944373182939613e+10,
    7.9056493047982162e+10,
    -1.4406958260628265e+11,
    2.2920471961522717e+11});

  std::cout << "T     = " << time << "\n";
  std::cout << "Scale = " << scale << "\n";
  std::cout << "Size  = " << coeffs.size() << "\n";

  // Call ROC here
  roc(coeffs, scale, rc, order);
}

